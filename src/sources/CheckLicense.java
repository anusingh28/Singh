package sources;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sijitend
 */
public class CheckLicense extends javax.swing.JFrame {
    private static String HW;
    private static String SN;
    private static String sKey;
    private static String value = null;
    public static String sLastUsed =new SimpleDateFormat("dd-MMM-yyyy").format(new Date());

    
    

    /**
     * Creates new form CheckLicense
     */
    public CheckLicense() {
        //System.out.println(MyCrypto.encrypt("dummy1"));
       // System.out.println(MyCrypto.encrypt("2dummy"));
        try{
        System.out.println(getHW());
        value = WinRegistry.readString(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\MYLIC\\sub", "val");
        if (value != null) 
        {
        
            sLastUsed = WinRegistry.readString(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\MYLIC\\sub", "lastused");
            String dec = MyCrypto.decrypt(MyCrypto.decrypt(value));
            System.out.println("dec : "+MyCrypto.decrypt(dec));
            String dec1 = MyCrypto.decrypt(dec.split("#")[0]);
            String dec2 = MyCrypto.decrypt(dec.split("#")[1]);
            if (dec1.equalsIgnoreCase(HW)  && dec2.equalsIgnoreCase(SN)) 
            {
                JOptionPane.showMessageDialog(CheckLicense.this, "HOST VERIFIED, LICENSE ALREADY", "License Check", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("HOST VERIFIED, LICENSE ALREADY");
                this.dispose();
                new NewJFrame().setVisible(true);
            } else {
                System.out.println("INVALID HOST");
                JOptionPane.showMessageDialog(CheckLicense.this, "HOST VERIFIED, LICENSE ALREADY", "License Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        } 
        else 
        {
            initComponents();
            //System.out.println(" ENTER LICENSE KEY : ");
            //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            

        }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXButton1 = new org.jdesktop.swingx.JXButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jXButton2 = new org.jdesktop.swingx.JXButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jXButton1.setText(" Click here to generate Key for License ");
        jXButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButton1ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 0, 204));

        jLabel1.setText(" License Key :");

        jXButton2.setText(" Register ");
        jXButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jXButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jXButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jXButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(49, 49, 49)
                .addComponent(jXButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jXButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButton1ActionPerformed
        // TODO add your handling code here:
        JTextField jt = new JTextField(sKey);
        jt.setEditable(false);
        JOptionPane.showMessageDialog(this,jt,"Registeration", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jXButton1ActionPerformed

    private void jXButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButton2ActionPerformed
        // TODO add your handling code here:
        String s =  jTextField1.getText();//br.readLine();
        System.out.println(s);
            String s1 = MyCrypto.decrypt(MyCrypto.decrypt(s).split("#")[0]);
            String s2 = MyCrypto.decrypt(MyCrypto.decrypt(s).split("#")[1]);
            System.out.println("s1:"+s1);
            System.out.println("s2:"+s2);
            
            
            if (s1.equalsIgnoreCase(HW)  && s2.equalsIgnoreCase(SN)) 
            {
                try{
                WinRegistry.createKey(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\MYLIC\\sub");
                WinRegistry.writeStringValue(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\MYLIC\\sub", "lastused", sLastUsed);
                WinRegistry.writeStringValue(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\MYLIC\\sub", "val", MyCrypto.encrypt(s));
                }catch(Exception e)
                {
                    e.printStackTrace();
                }
                JOptionPane.showMessageDialog(CheckLicense.this, "<html><b>Registeration Completed Succesfully</b><br>", "License Check", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("VALID LICENSE");
                this.dispose();
                new Createlogin().setVisible(true);
                
            } else {
                JOptionPane.showMessageDialog(CheckLicense.this, "INVALID LICENSE", "License Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
    }//GEN-LAST:event_jXButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckLicense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckLicense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckLicense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckLicense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CheckLicense cl = new CheckLicense();
                if(value == null)
                    cl.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.swingx.JXButton jXButton1;
    private org.jdesktop.swingx.JXButton jXButton2;
    // End of variables declaration//GEN-END:variables

    private static final String getHW() throws IOException 
    {
        String sRet = null, sRet1 = null, sRet2 = null;
        Process p = Runtime.getRuntime().exec("cmd /c getmac /fo csv /nh /v & wmic bios get serialnumber");
        BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
        String line;
        String sHW;
        boolean bGotHW = false;
        while ((line = in.readLine()) != null) 
        {
            line = line.trim().replaceAll("\"", "");
            if (line.matches("^Local Area Connection.*")) 
            {

                sRet1 = line.split(",")[2].toUpperCase().trim();
                HW = sRet1;
                System.out.println("MAC : "+sRet1);
                System.out.println("Encrypted MAC : "+MyCrypto.encrypt(sRet1));
                bGotHW = true;
                
            } else if (line.matches("^Wireless Network Connection.*") && !line.matches(".*Virtual.*") && !bGotHW) {
                
                sRet1 = line.split(",")[2].toUpperCase().trim();
                HW = sRet1;
                System.out.println("MAC : "+sRet1);
                System.out.println("Encrypted MAC : "+MyCrypto.encrypt(sRet1));
                
            }
            else if (line.matches("^(?=.*[A-Z])(?=.*[0-9])[A-Z0-9]+$"))
            {
                        sRet2 = line.trim();
                        SN = sRet2;
                        System.out.println("SN : "+SN);
                        System.out.println("Encrypted S.N. : "+MyCrypto.encrypt(sRet2));
            }
            // process the line.
        }
        p.destroy();
        sKey = MyCrypto.encrypt("dummy1")+MyCrypto.encrypt(sRet1)+"#"+MyCrypto.encrypt(sRet2)+MyCrypto.encrypt("2dummy");
        return sRet;
    }

}
